{
  "version": 3,
  "sources": ["../src/handlers.ts", "../src/index.ts"],
  "sourcesContent": ["import { Design, DesignData, DesignStructure, Message, SelectedDesignIds, TXDAMessageHandlers } from \"./types\"\n\nexport const attachHandlers = (port: MessagePort, handlers: TXDAMessageHandlers) => {\n  if (handlers._message) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<any>>) => {\n      handlers._message?.(portEvent)\n    })\n  }\n\n  if (handlers.onConnected) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<undefined>>) => {\n      if (portEvent.data?.messageType === 'txdaConnectionAcknowledgement') {\n        handlers.onConnected?.(portEvent.data?.metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesign) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<Design>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesign') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesign?.(currentDesign, metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesign3d) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<DesignStructure>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesign3d') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesign3d?.(currentDesign, metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesignData) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<DesignData>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesignData') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesignData?.(currentDesign, metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateSelectedDesignIds) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<SelectedDesignIds>>) => {\n      if (portEvent.data?.messageType === 'txdaSelectedDesignIds') {\n        const {\n          metaData,\n          data: selectedDesignIds\n        } = portEvent.data\n        handlers.onUpdateSelectedDesignIds?.(selectedDesignIds, metaData)\n      }\n    })\n  }\n\n}\n", "import { attachHandlers } from \"./handlers\"\nimport { KeyValueData, TXDAConnection, TXDAMessageHandlers } from \"./types\"\n\n/**\n * Request a connection to the Torx Design-Analyze application that the current page is embedded in.\n * @param url The URL of the Torx Design-Analyze installation that the current page is embedded in. Used to ensure that only messages from the correct origin URL are accepted.\n * @param handlers Event handlers to execute when events are received from Torx Design-Analyze.\n */\nconst initialize = (url: string, handlers: TXDAMessageHandlers = {}): Promise<TXDAConnection> =>\n  new Promise((resolve, reject) => {\n    const origin = new URL(url).origin\n\n    if (origin === '*') {\n      reject('Specific target origins must be specified to connect to TXDA installs')\n      return\n    }\n\n    const handleWindowEvent = (windowEvent: MessageEvent) => {\n      if (windowEvent.data?.messageType === 'txdaMessagePortTransfer') {\n        // Ensure the origin of the message matches the specified URL's origin\n        if (windowEvent.origin !== origin) {\n          reject('Attempted TXDA connection event from unauthorized origin')\n          return\n        }\n\n        // Ensure that the source of the event is the window embedding this one\n        if (windowEvent.source !== window.parent) {\n          reject('Attempted TXDA connection event from unauthorized source')\n          return\n        }\n\n        const port = windowEvent.ports[0]\n\n        // Add any given event handlers to the port\n        attachHandlers(port, handlers)\n\n        port.start()\n\n        // Fire an initial request for the current design as soon as the port starts\n        port.postMessage({ messageType: 'txdaRequestCurrentDesign' })\n\n        const txdaConnection: TXDAConnection = {\n          _port: port,\n          requestCurrentDesign: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesign'\n          }),\n          requestCurrentDesign3d: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesign3d'\n          }),\n          requestCurrentDesignData: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesignData'\n          }),\n          addCurrentDesignData: (data: KeyValueData) => port.postMessage({\n            messageType: 'txdaAddCurrentDesignData',\n            data\n          }),\n          addCurrentStructureData: (data: KeyValueData) => port.postMessage({\n            messageType: 'txdaAddCurrentStructureData',\n            data\n          }),\n          disconnect: () => {\n            port.close()\n            handlers.onDisconnected?.()\n          }\n        }\n\n        resolve(txdaConnection)\n      }\n    }\n\n    // Listen for events from TXDA for initial setup of MessagePort,\n    // removing the event listener after a single invocation\n    window.addEventListener('message', handleWindowEvent, { once: true })\n\n    window.parent.postMessage({\n      messageType: 'txdaConnectionRequest',\n      windowName: window.name,\n    }, origin)\n\n    // If there's no response from TXDA, reject\n    setTimeout(() => {\n      reject('Connection to TXDA failed (timed out)')\n    }, 10000)\n  })\n\nexport { initialize }\n"],
  "mappings": ";AAEO,IAAM,iBAAiB,CAAC,MAAmB,aAAkC;AAClF,MAAI,SAAS,UAAU;AACrB,SAAK,iBAAiB,WAAW,CAAC,cAA0C;AAC1E,eAAS,WAAW;AAAA;AAAA;AAIxB,MAAI,SAAS,aAAa;AACxB,SAAK,iBAAiB,WAAW,CAAC,cAAgD;AAChF,UAAI,UAAU,MAAM,gBAAgB,iCAAiC;AACnE,iBAAS,cAAc,UAAU,MAAM;AAAA;AAAA;AAAA;AAK7C,MAAI,SAAS,uBAAuB;AAClC,SAAK,iBAAiB,WAAW,CAAC,cAA6C;AAC7E,UAAI,UAAU,MAAM,gBAAgB,qBAAqB;AACvD,cAAM;AAAA,UACJ;AAAA,UACA,MAAM;AAAA,YACJ,UAAU;AACd,iBAAS,wBAAwB,eAAe;AAAA;AAAA;AAAA;AAKtD,MAAI,SAAS,yBAAyB;AACpC,SAAK,iBAAiB,WAAW,CAAC,cAAsD;AACtF,UAAI,UAAU,MAAM,gBAAgB,uBAAuB;AACzD,cAAM;AAAA,UACJ;AAAA,UACA,MAAM;AAAA,YACJ,UAAU;AACd,iBAAS,0BAA0B,eAAe;AAAA;AAAA;AAAA;AAKxD,MAAI,SAAS,2BAA2B;AACtC,SAAK,iBAAiB,WAAW,CAAC,cAAiD;AACjF,UAAI,UAAU,MAAM,gBAAgB,yBAAyB;AAC3D,cAAM;AAAA,UACJ;AAAA,UACA,MAAM;AAAA,YACJ,UAAU;AACd,iBAAS,4BAA4B,eAAe;AAAA;AAAA;AAAA;AAK1D,MAAI,SAAS,2BAA2B;AACtC,SAAK,iBAAiB,WAAW,CAAC,cAAwD;AACxF,UAAI,UAAU,MAAM,gBAAgB,yBAAyB;AAC3D,cAAM;AAAA,UACJ;AAAA,UACA,MAAM;AAAA,YACJ,UAAU;AACd,iBAAS,4BAA4B,mBAAmB;AAAA;AAAA;AAAA;AAAA;;;ACpDhE,IAAM,aAAa,CAAC,KAAa,WAAgC,OAC/D,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/B,QAAM,SAAS,IAAI,IAAI,KAAK;AAE5B,MAAI,WAAW,KAAK;AAClB,WAAO;AACP;AAAA;AAGF,QAAM,oBAAoB,CAAC,gBAA8B;AACvD,QAAI,YAAY,MAAM,gBAAgB,2BAA2B;AAE/D,UAAI,YAAY,WAAW,QAAQ;AACjC,eAAO;AACP;AAAA;AAIF,UAAI,YAAY,WAAW,OAAO,QAAQ;AACxC,eAAO;AACP;AAAA;AAGF,YAAM,OAAO,YAAY,MAAM;AAG/B,qBAAe,MAAM;AAErB,WAAK;AAGL,WAAK,YAAY,EAAE,aAAa;AAEhC,YAAM,iBAAiC;AAAA,QACrC,OAAO;AAAA,QACP,sBAAsB,MAAM,KAAK,YAAY;AAAA,UAC3C,aAAa;AAAA;AAAA,QAEf,wBAAwB,MAAM,KAAK,YAAY;AAAA,UAC7C,aAAa;AAAA;AAAA,QAEf,0BAA0B,MAAM,KAAK,YAAY;AAAA,UAC/C,aAAa;AAAA;AAAA,QAEf,sBAAsB,CAAC,SAAuB,KAAK,YAAY;AAAA,UAC7D,aAAa;AAAA,UACb;AAAA;AAAA,QAEF,yBAAyB,CAAC,SAAuB,KAAK,YAAY;AAAA,UAChE,aAAa;AAAA,UACb;AAAA;AAAA,QAEF,YAAY,MAAM;AAChB,eAAK;AACL,mBAAS;AAAA;AAAA;AAIb,cAAQ;AAAA;AAAA;AAMZ,SAAO,iBAAiB,WAAW,mBAAmB,EAAE,MAAM;AAE9D,SAAO,OAAO,YAAY;AAAA,IACxB,aAAa;AAAA,IACb,YAAY,OAAO;AAAA,KAClB;AAGH,aAAW,MAAM;AACf,WAAO;AAAA,KACN;AAAA;",
  "names": []
}
